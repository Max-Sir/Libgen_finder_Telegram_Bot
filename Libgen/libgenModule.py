import config
import telegram
import telegram.ext
import logging
import Libgen.searchInDB as LgSearch
from Statistics import StatisticsDecorator
from Statistics import SearchInLibgenAction
from classes import BotModule


class LibgenModule(BotModule):
    def __init__(self, updater: telegram.ext.Updater, dispatcher: telegram.ext.dispatcher):
        self.updater = updater
        self.dispatcher = dispatcher
        self.tge = telegram.ext  # –ê–ª–∏–∞—Å –¥–ª—è telegram.ext
        self.tg = telegram  # –ê–ª–∏–∞—Å –¥–ª—è telegram

    def install_handlers(self, end_conversation):
        # –ê–ª–∏–∞—Å—ã
        filters = self.tge.Filters
        message = self.tge.MessageHandler
        conversation = self.tge.ConversationHandler
        callbackQuery = self.tge.CallbackQueryHandler

        # –î–∏–∞–ª–æ–≥ –ø–æ–∏—Å–∫–∞ –ø–æ Libgen
        search_in_libgen_conv = conversation(
            entry_points=[
                           message(filters.regex(config.search_in_lg_button) & filters.private, self.send_keyb_for_libgen),
                           message(filters.regex(config.prefix_start_in_lg) & filters.private, self.send_keyb_for_libgen)
                         ],
            states={
                0: [
                    message(filters.regex(config.back_button) & filters.private, end_conversation),  # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
                    message(filters.regex(config.help_in_fts3_button) & filters.private, self.send_fts3_help),
                    message(filters.text & filters.private, self.search_in_libgen)
                    ]  # –ü–æ–∏—Å–∫
            },
            fallbacks=[message(filters.regex(config.back_button) & filters.private, end_conversation)], allow_reentry=True)

        # –û—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–∞" –≤ –≤–æ–ø—Ä–æ—Å–µ –ø—Ä–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ libgen
        continue_srch_libgen_btn = callbackQuery(self.query_continue_search_libgen, pattern="continue_libgen")

        self.dispatcher.add_handler(search_in_libgen_conv)
        self.dispatcher.add_handler(continue_srch_libgen_btn)

    # –ö–æ–ª–±–µ–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ –ª–∏–±–≥–µ–Ω–µ
    def send_keyb_for_libgen(self, update, context):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ libgen
        :param update:
        :param context:
        :return:
        """
        keyb = config.into_lg_search_reply_markup
        reply_markup = self.tg.ReplyKeyboardMarkup(keyb, resize_keyboard=True, one_time_keyboard=True)
        update.message.reply_text(config.start_in_libgen_msg, reply_markup=reply_markup, parse_mode=self.tg.ParseMode.HTML)
        return 0

    @StatisticsDecorator(SearchInLibgenAction())
    def search_in_libgen(self, update, context):
        """
        –û—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ libgen
        :param update: update –æ—Ç python-telegram-bot
        :param context: –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç python-telegram-bot
        :return: None
        """
        if len(update.effective_message.text) > 100 or len(update.effective_message.text) < 3:
            update.message.reply_text("–û—Ç 3-—Ö –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤")
            return

        self.do_search_lg(context, update.effective_chat.id, update.effective_message.text)

    def query_continue_search_libgen(self, update, context):
        """
        –û—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
        :param update: update –æ—Ç python-telegram-bot
        :param context: –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç python-telegram-bot
        :return: None
        """
        query = update.callback_query
        context.bot.delete_message(query.message.chat_id, query.message.message_id)

        self.do_search_lg(context, query.message.chat_id)

    @telegram.ext.run_async
    def do_search_lg(self, context, chat_id, text=None, offset_lg=None, limit=config.send_libgen_limit):
        """
        –ü–æ–∏—Å–∫ –ø–æ libgen
        –ï—Å–ª–∏ text –Ω–µ None –∏ offset_ch —Ä–∞–≤–µ–Ω None - –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º offset_ch (= 0)
        –ï—Å–ª–∏ text –Ω–µ None –∏ offset_ch –Ω–µ None - –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Å–º–µ—â–µ–Ω–∏–µ–º (offset_ch)
        –ï—Å–ª–∏ text —Ä–∞–≤–µ–Ω None - –ò—â–µ–º —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Å –Ω–∏–º, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–µ–∫—Å—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É
        :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç python-telegram-bot
        :param chat_id: —ç—Ç–æ –ø–æ–Ω—è—Ç–Ω–æ
        :param text: —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
        :param offset_lg: —Å–º–µ—â–µ–Ω–∏–µ —Ç–æ–≥–æ —Å–∞–º–æ–≥–æ –ø–æ–∏—Å–∫–∞
        :param limit: –ª–∏–º–∏—Ç –≤—ã–¥–∞—á–∏
        :return: None
        """

        if text:
            if not offset_lg:
                offset_lg = 0
        else:
            text = context.user_data.get("last_search_lg", None)
            offset_lg = context.user_data.get("offset_lg", 0)

            if text == None:
                context.bot.send_message(chat_id, "–ú—ã –Ω–µ –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ —Ç–≤–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ :)")
                return

        with LgSearch.BookSearch() as _db:
            data = _db.search(text, limit, offset_lg)

        if not data.ok():
            context.bot.send_message(chat_id, data.value())
            return

        for book in data.value():
            keyb = [[self.tg.InlineKeyboardButton("Download", url="http://libgen.lc/ads.php?md5={}".format(book["md5"]))],
                    [self.tg.InlineKeyboardButton("Mirrors", url="http://libgen.lc/item/index.php?md5={}".format(book["md5"]))]]

            reply_markup = self.tg.InlineKeyboardMarkup(keyb)
            context.bot.send_message(chat_id, self.__get_descr_libgen(book), parse_mode=self.tg.ParseMode.HTML, reply_markup=reply_markup)

        if len(data.value()) >= limit:
            keyb = [[self.tg.InlineKeyboardButton("–î–∞", callback_data="continue_libgen")]]
            reply_markup = self.tg.InlineKeyboardMarkup(keyb)
            context.bot.send_message(chat_id, "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ –≤ LibGen?", reply_markup=reply_markup)
            context.user_data["last_search_lg"] = text

        # –¢–∞–∫, —ç—Ç–∞ —à—Ç—É–∫–∞ —Å–Ω–µ—Å–µ–Ω–∞ —Å—é–¥–∞ –ø–æ –æ–¥–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ - –µ—Å–ª–∏ –Ω–∞–π–¥–µ—Ç—Å—è –ø–æ—Å—Ç–æ–≤ –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞ - —Å–º–µ—â–µ–Ω–∏–µ –≤—Å–µ —Ä–∞–≤–Ω–æ
        # –ø—Ä–∏–±–∞–≤–∏—Ç—Å—è –∏ –ø–æ—Å–ª–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–∞–ª–µ–µ - –±–æ—Ç –ø–æ—à–ª–µ—Ç —é–∑–µ—Ä–∞ –Ω–∞—Ö—Ä–µ–Ω (—Å–∫–∞–∑–∞–≤, —á—Ç–æ –Ω–∏ —á–µ—Ä—Ç–∞
        # –Ω–µ –Ω–∞—à–µ–ª)
        context.user_data["offset_lg"] = offset_lg + limit

    def send_fts3_help(self, update, context):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø–æ–∏—Å–∫–∞ –ø–æ libgen
        :param update:
        :param context:
        :return:
        """
        update.message.reply_text(config.help_in_fts3, parse_mode=self.tg.ParseMode.HTML)
        return

    @staticmethod
    def __get_descr_libgen(dict_book):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–º –≤–∏–¥–µ, –≤–µ—Å—å —Å–º—ã—Å–ª —Ç–µ–ª–æ–¥–≤–∏–∂–µ–Ω–∏–π —Å if - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Ö–æ–¥—É, –¥–∞–±—ã –Ω–µ
        –∑–∞–±–∏–≤–∞—Ç—å –≤—ã–¥–∞—á—É –ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
        :param dict_book:
        :return:
        """
        db = dict_book

        blank = "".join(
            (  # –ö–æ—Ä—Ç–µ–∂, —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–µ –≤–∏–Ω–∏ —Å–µ–±—è üò≠
                ("Title: <b>" + db["title"] + "</b>") if db["title"] else "", "\n",
                ("<a href='http://libgen.lc/covers/{}'>¬†</a>".format(db["coverurl"])) if db["coverurl"] else "",
                "\n",
                ("Language: <code>" + db["language"] + "</code>\n") if db["language"] else "",
                ("Author: <code>" + db["author"] + "</code>\n") if db["author"] else "",
                ("Year: <code>" + db["year"] + "</code>\n") if db["year"] else "",
                ("Pages: <code>" + db["pages"] + "</code>\n") if db["pages"] else "",
                ("ISBN: <code>" + db["identifier"] + "</code>\n") if db["identifier"] else "",
                ("Publisher: <code>" + db["publisher"] + "</code>\n") if db["publisher"] else "",
                ("Volume info: <code>" + db["volumeinfo"] + "</code>\n") if db["volumeinfo"] else "",
                ("Edition: <code>" + db["edition"] + "</code>\n") if db["edition"] else "",
                ("Series: <code>" + db["series"] + "</code>\n") if db["series"] else "",
                ("Extension: <code>" + db["extension"] + "</code>\n") if db["extension"] else "",
                ("MD5: <code>" + db["md5"] + "</code>\n") if db["md5"] else "",
                ("Filesize: <code>" + db["filesize"] + "</code>\n") if db["filesize"] else "",
                "\n",
                ("Tags: <code>" + db["tags"] + "</code>\n\n") if db["tags"] else "",
                "Download: <a href='http://libgen.lc/ads.php?md5={}'>---LINK---</a>\n".format(db["md5"]),
                "Mirrors: <a href='http://libgen.lc/item/index.php?md5={}'>---LINK---</a>\n".format(db["md5"]),
                "\n",
                "@bzd_channel ",
            )  # –ö–æ–Ω–µ—Ü –∫–æ—Ä—Ç–µ–∂–∞
        )

        return blank
